"""
  Maintained by jemo from 2018.10.12 to now
  Created by jemo on 2018.10.12 07:42:44.
"""
type User implements Node {
  id: ID!
  token: String
  nickname: String
  avatar: String
  introduction: String
  backgroundImage: String
}

type Viewer {
  userList(status: String = "any", after: String, first: Int, before: String, last: Int): UserConnection
}

type Result {
  error: Boolean!
  message: String
}

"""
  get validation code mutation
"""
input GetValidationCodeInput {
  phone: String!
}

type GetValidationCodePayload {
  result: Result!
}

"""
  create user mutation
"""
type CreateUserResult {
  error: Boolean!
  message: String
  token: String
}

input CreateUserInput {
  phone: String!
  password: String!
  code: String!
}

type CreateUserPayload {
  createUserResult: CreateUserResult!
}

"""
  get token mutation
"""
type GetTokenResult {
  error: Boolean!
  message: String
  phone: String
  token: String
}

input GetTokenInput {
  phone: String!
  password: String!
}

type GetTokenPayload {
  getTokenResult: GetTokenResult!
}

"""
  update user mutation
"""

input UpdateUserInput {
  token: String!
  nickname: String
  clientMutationId: String
  fileKey: String
  introduction: String
}

type UpdateUserPayload {
  user: User
  clientMutationId: String
}

"""
  mutation
"""

type Mutation {
  getValidationCode(input: GetValidationCodeInput!): GetValidationCodePayload
  createUser(input: CreateUserInput!): CreateUserPayload
  getToken(input: GetTokenInput!): GetTokenPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

"""
  query
"""
type Query {
  user(token: String, id: String): User
  node(
    id: ID!
  ): Node
  viewer: Viewer
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Node {
  id: ID!
}
